stages:
  - build
  - production

build:
  stage: build
  image: docker:20.10.12
  services:
    - name: docker:20.10.16-dind
      command: ["--tls=false"]
  variables:
    DOCKER_TLS_CERTDIR: ""
    DOCKER_HOST: tcp://127.0.0.1:2375/
  before_script:
    - |
      if [[ -z "$CI_COMMIT_TAG" ]]; then
          export CI_APPLICATION_REPOSITORY=${CI_APPLICATION_REPOSITORY:-$CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG}
          export CI_APPLICATION_TAG=${CI_APPLICATION_TAG:-$CI_COMMIT_SHA}
      else
          export CI_APPLICATION_REPOSITORY=${CI_APPLICATION_REPOSITORY:-$CI_REGISTRY_IMAGE}
          export CI_APPLICATION_TAG=${CI_APPLICATION_TAG:-$CI_COMMIT_TAG}
      fi
  script:
    - docker login $CI_REGISTRY -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD

    - |
      docker build \
          --cache-from "$CI_APPLICATION_REPOSITORY:$CI_COMMIT_BEFORE_SHA" \
          --cache-from "${CI_APPLICATION_REPOSITORY}:latest" \
          --tag "${CI_APPLICATION_REPOSITORY}:${CI_APPLICATION_TAG}" \
          --tag "${CI_APPLICATION_REPOSITORY}:latest" \
          .

    - docker push "${CI_APPLICATION_REPOSITORY}:${CI_APPLICATION_TAG}"
    - docker push "${CI_APPLICATION_REPOSITORY}:latest"
  tags:
    - kubernetes

production:
  stage: production
  image: "registry.gitlab.com/gitlab-org/cluster-integration/auto-deploy-image:v2.18.1"
  variables:
    KUBE_NAMESPACE: "fig2story-prod"
  script:
    - auto-deploy download_chart
    - auto-deploy use_kube_context || true
    - auto-deploy ensure_namespace
    - auto-deploy create_secret
    - auto-deploy deploy
    - auto-deploy persist_environment_url
  environment:
#    name: staging
#    url: http://$CI_PROJECT_PATH_SLUG-staging.$KUBE_INGRESS_BASE_DOMAIN
    name: production
    url: http://fig2story.io
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      when: always
  tags:
    - kubernetes